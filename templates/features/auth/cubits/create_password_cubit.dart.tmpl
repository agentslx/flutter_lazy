import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import '../../../../core/form/password_input.dart';
import '../../../../core/form/confirmed_password_input.dart';
import '../data/repository/auth_repository.dart';

part 'create_password_state.dart';

class CreatePasswordCubit extends Cubit<CreatePasswordState> {
  final AuthRepository _authRepository;

  CreatePasswordCubit(this._authRepository) 
      : super(const CreatePasswordState());

  void passwordChanged(String value) {
    final password = PasswordInput.dirty(value);
    emit(state.copyWith(
      password: password,
      confirmedPassword: ConfirmedPasswordInput.dirty(
        password: value, 
        value: state.confirmedPassword.value,
      ),
      status: CreatePasswordStatus.editing,
    ));
  }

  void confirmedPasswordChanged(String value) {
    final confirmedPassword = ConfirmedPasswordInput.dirty(
      password: state.password.value,
      value: value,
    );
    emit(state.copyWith(
      confirmedPassword: confirmedPassword,
      status: CreatePasswordStatus.editing,
    ));
  }
  
  void createPassword() async {
    if (!state.isValid) return;
    
    emit(state.copyWith(status: CreatePasswordStatus.loading));
    
    try {
      await _authRepository.createPassword(state.password.value);
      emit(state.copyWith(status: CreatePasswordStatus.success));
    } catch (e) {
      emit(state.copyWith(
        status: CreatePasswordStatus.error,
        error: e.toString(),
      ));
    }
  }
}
