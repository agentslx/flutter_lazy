import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

/// A service for handling local storage operations
class LocalStorage {
  static late SharedPreferences _prefs;
  
  /// Initialize the local storage
  static Future<void> init() async {
    _prefs = await SharedPreferences.getInstance();
  }
  
  /// Save a string value
  static Future<bool> setString(String key, String value) async {
    return await _prefs.setString(key, value);
  }
  
  /// Get a string value
  static String getString(String key, {String defaultValue = ''}) {
    return _prefs.getString(key) ?? defaultValue;
  }
  
  /// Save a boolean value
  static Future<bool> setBool(String key, bool value) async {
    return await _prefs.setBool(key, value);
  }
  
  /// Get a boolean value
  static bool getBool(String key, {bool defaultValue = false}) {
    return _prefs.getBool(key) ?? defaultValue;
  }
  
  /// Save an integer value
  static Future<bool> setInt(String key, int value) async {
    return await _prefs.setInt(key, value);
  }
  
  /// Get an integer value
  static int getInt(String key, {int defaultValue = 0}) {
    return _prefs.getInt(key) ?? defaultValue;
  }
  
  /// Save a double value
  static Future<bool> setDouble(String key, double value) async {
    return await _prefs.setDouble(key, value);
  }
  
  /// Get a double value
  static double getDouble(String key, {double defaultValue = 0.0}) {
    return _prefs.getDouble(key) ?? defaultValue;
  }
  
  /// Save a list of strings
  static Future<bool> setStringList(String key, List<String> value) async {
    return await _prefs.setStringList(key, value);
  }
  
  /// Get a list of strings
  static List<String> getStringList(String key, {List<String> defaultValue = const []}) {
    return _prefs.getStringList(key) ?? defaultValue;
  }
  
  /// Save an object (converts to JSON)
  static Future<bool> setObject(String key, dynamic value) async {
    try {
      final String jsonString = json.encode(value);
      return await _prefs.setString(key, jsonString);
    } catch (e) {
      print('Error saving object: $e');
      return false;
    }
  }
  
  /// Get an object (converts from JSON)
  static T? getObject<T>(String key, T Function(Map<String, dynamic>) fromJson) {
    try {
      final String? jsonString = _prefs.getString(key);
      if (jsonString == null) return null;
      
      final Map<String, dynamic> jsonMap = json.decode(jsonString);
      return fromJson(jsonMap);
    } catch (e) {
      print('Error retrieving object: $e');
      return null;
    }
  }
  
  /// Check if a key exists
  static bool containsKey(String key) {
    return _prefs.containsKey(key);
  }
  
  /// Remove a specific item
  static Future<bool> remove(String key) async {
    return await _prefs.remove(key);
  }
  
  /// Clear all data
  static Future<bool> clear() async {
    return await _prefs.clear();
  }
}
