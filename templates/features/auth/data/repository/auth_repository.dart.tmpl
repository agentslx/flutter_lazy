import 'package:dartz/dartz.dart';
import '../../../../models/failure.dart';
import '../models/user_model.dart';

abstract class AuthRepository {
  Future<Either<Failure, UserModel>> login(String email, String password);
  Future<Either<Failure, UserModel>> register(String name, String email, String password);
  Future<Either<Failure, void>> forgotPassword(String email);
  Future<Either<Failure, void>> logout();
  Future<Either<Failure, UserModel>> getCurrentUser();
}

class AuthRepositoryImpl implements AuthRepository {
  final RestModule _restModule;
  final LocalStorageModule _localStorageModule;

  AuthRepositoryImpl(this._restModule, this._localStorageModule);

  @override
  Future<Either<Failure, UserModel>> login(String email, String password) async {
    try {
      final response = await _restModule.post(
        '/auth/login',
        data: {
          'email': email,
          'password': password,
        },
      );

      final user = UserModel.fromJson(response.data['user']);
      
      // Save auth token
      await _localStorageModule.setString('token', response.data['token']);
      
      return Right(user);
    } catch (e) {
      return Left(Failure('Login failed: ${e.toString()}'));
    }
  }

  @override
  Future<Either<Failure, UserModel>> register(String name, String email, String password) async {
    try {
      final response = await _restModule.post(
        '/auth/register',
        data: {
          'name': name,
          'email': email,
          'password': password,
        },
      );

      final user = UserModel.fromJson(response.data['user']);
      
      // Save auth token
      await _localStorageModule.setString('token', response.data['token']);
      
      return Right(user);
    } catch (e) {
      return Left(Failure('Registration failed: ${e.toString()}'));
    }
  }

  @override
  Future<Either<Failure, void>> forgotPassword(String email) async {
    try {
      await _restModule.post(
        '/auth/forgot-password',
        data: {
          'email': email,
        },
      );
      
      return const Right(null);
    } catch (e) {
      return Left(Failure('Password reset request failed: ${e.toString()}'));
    }
  }

  @override
  Future<Either<Failure, void>> logout() async {
    try {
      await _restModule.post('/auth/logout');
      
      // Clear token
      await _localStorageModule.remove('token');
      
      return const Right(null);
    } catch (e) {
      return Left(Failure('Logout failed: ${e.toString()}'));
    }
  }

  @override
  Future<Either<Failure, UserModel>> getCurrentUser() async {
    try {
      final token = await _localStorageModule.getString('token');
      
      if (token == null) {
        return Left(Failure('Not authenticated'));
      }
      
      final response = await _restModule.get('/auth/me');
      final user = UserModel.fromJson(response.data);
      
      return Right(user);
    } catch (e) {
      return Left(Failure('Failed to get current user: ${e.toString()}'));
    }
  }
}
