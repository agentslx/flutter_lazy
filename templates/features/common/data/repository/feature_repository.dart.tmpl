import 'package:dartz/dartz.dart';
import 'package:dio/dio.dart';

import '../../../../di.dart';
import '../../../../core/failures/failure.dart';
import '../datasources/{{ FEATURE_NAME_SNAKE }}_local_datasource.dart';
import '../datasources/{{ FEATURE_NAME_SNAKE }}_remote_datasource.dart';

abstract class {{ FEATURE_NAME_PASCAL }}Repository {
  /// Gets data from the repository
  Future<Either<Failure, dynamic>> getData();
}

class {{ FEATURE_NAME_PASCAL }}RepositoryImpl implements {{ FEATURE_NAME_PASCAL }}Repository {
  {{ FEATURE_NAME_PASCAL }}RepositoryImpl({
    {{ FEATURE_NAME_PASCAL }}RemoteDatasource? remoteDatasource,
    {{ FEATURE_NAME_PASCAL }}LocalDatasource? localDatasource,
  }) : 
    _remoteDatasource = remoteDatasource ?? getIt<{{ FEATURE_NAME_PASCAL }}RemoteDatasource>(),
    _localDatasource = localDatasource ?? getIt<{{ FEATURE_NAME_PASCAL }}LocalDatasource>();

  final {{ FEATURE_NAME_PASCAL }}RemoteDatasource _remoteDatasource;
  final {{ FEATURE_NAME_PASCAL }}LocalDatasource _localDatasource;

  @override
  Future<Either<Failure, dynamic>> getData() async {
    try {
      final data = await _remoteDatasource.fetch{{ FEATURE_NAME_PASCAL }}Data();
      return Right(data);
    } on DioException catch (e) {
      return Left(NetworkFailure(message: e.message ?? 'Network error occurred'));
    } catch (e) {
      return Left(UnexpectedFailure(message: e.toString()));
    }
  }
}
