import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../cubits/login_cubit/login_cubit.dart';
import '../../cubits/login_cubit/login_state.dart';
import 'package:go_router/go_router.dart';
import '../../../../widgets/app_text_field.dart';
import '../../../../widgets/app_button.dart';
import 'package:easy_localization/easy_localization.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Login').tr(),
      ),
      body: BlocConsumer<LoginCubit, LoginState>(
        listener: (context, state) {
          if (state.status == LoginStatus.success) {
            context.go('/home');
          } else if (state.status == LoginStatus.error) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(state.error ?? 'An error occurred'),
                backgroundColor: Colors.red,
              ),
            );
          }
        },
        builder: (context, state) {
          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  const SizedBox(height: 32),
                  BlocBuilder<LoginCubit, LoginState>(
                    buildWhen: (previous, current) => previous.email != current.email,
                    builder: (context, state) {
                      return AppTextField(
                        controller: _emailController,
                        label: 'Email'.tr(),
                        keyboardType: TextInputType.emailAddress,
                        errorText: state.email.displayError != null
                            ? 'Please enter a valid email'.tr()
                            : null,
                        onChanged: (value) => context.read<LoginCubit>().emailChanged(value),
                      );
                    },
                  ),
                  const SizedBox(height: 16),
                  BlocBuilder<LoginCubit, LoginState>(
                    buildWhen: (previous, current) => previous.password != current.password,
                    builder: (context, state) {
                      return AppTextField(
                        controller: _passwordController,
                        label: 'Password'.tr(),
                        obscureText: true,
                        errorText: state.password.displayError != null
                            ? 'Password must be at least 6 characters'.tr()
                            : null,
                        onChanged: (value) => context.read<LoginCubit>().passwordChanged(value),
                      );
                    },
                  ),
                  const SizedBox(height: 8),
                  Align(
                    alignment: Alignment.centerRight,
                    child: TextButton(
                      onPressed: () {
                        context.push('/forgot-password');
                      },
                      child: const Text('Forgot Password?').tr(),
                    ),
                  ),
                  const SizedBox(height: 24),
                  AppButton(
                    onPressed: state.status == LoginStatus.loading || !state.isValid
                        ? null
                        : () {
                            context.read<LoginCubit>().login();
                          },
                    text: 'Login'.tr(),
                    isLoading: state.status == LoginStatus.loading,
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text('Don\'t have an account?'.tr()),
                      TextButton(
                        onPressed: () {
                          context.push('/register');
                        },
                        child: const Text('Register').tr(),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
