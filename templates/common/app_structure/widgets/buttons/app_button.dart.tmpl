import 'package:flutter/material.dart';

/// Standard application button with multiple variants
class AppButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final ButtonVariant variant;
  final ButtonSize size;
  final bool isLoading;
  final IconData? icon;
  final bool fullWidth;
  
  const AppButton({
    Key? key,
    required this.text,
    required this.onPressed,
    this.variant = ButtonVariant.primary,
    this.size = ButtonSize.medium,
    this.isLoading = false,
    this.icon,
    this.fullWidth = false,
  }) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    
    // Determine button styling based on variant
    Color backgroundColor;
    Color textColor;
    Color? borderColor;
    
    switch (variant) {
      case ButtonVariant.primary:
        backgroundColor = colorScheme.primary;
        textColor = colorScheme.onPrimary;
        borderColor = null;
        break;
      case ButtonVariant.secondary:
        backgroundColor = colorScheme.secondary;
        textColor = colorScheme.onSecondary;
        borderColor = null;
        break;
      case ButtonVariant.outline:
        backgroundColor = Colors.transparent;
        textColor = colorScheme.primary;
        borderColor = colorScheme.primary;
        break;
      case ButtonVariant.text:
        backgroundColor = Colors.transparent;
        textColor = colorScheme.primary;
        borderColor = null;
        break;
    }
    
    // Determine button size
    double horizontalPadding;
    double verticalPadding;
    double fontSize;
    double iconSize;
    
    switch (size) {
      case ButtonSize.small:
        horizontalPadding = 12;
        verticalPadding = 6;
        fontSize = 14;
        iconSize = 16;
        break;
      case ButtonSize.medium:
        horizontalPadding = 16;
        verticalPadding = 10;
        fontSize = 16;
        iconSize = 18;
        break;
      case ButtonSize.large:
        horizontalPadding = 24;
        verticalPadding = 14;
        fontSize = 18;
        iconSize = 20;
        break;
    }
    
    final buttonWidget = Material(
      color: backgroundColor,
      borderRadius: BorderRadius.circular(8),
      child: InkWell(
        onTap: isLoading ? null : onPressed,
        borderRadius: BorderRadius.circular(8),
        child: Container(
          padding: EdgeInsets.symmetric(
            horizontal: horizontalPadding,
            vertical: verticalPadding,
          ),
          decoration: BoxDecoration(
            border: borderColor != null
                ? Border.all(color: borderColor, width: 1.5)
                : null,
            borderRadius: BorderRadius.circular(8),
          ),
          child: isLoading
              ? _buildLoadingIndicator(textColor)
              : _buildButtonContent(
                  text: text,
                  textColor: textColor,
                  fontSize: fontSize,
                  icon: icon,
                  iconSize: iconSize,
                ),
        ),
      ),
    );
    
    return fullWidth
        ? SizedBox(width: double.infinity, child: buttonWidget)
        : buttonWidget;
  }
  
  Widget _buildLoadingIndicator(Color color) {
    return SizedBox(
      height: 20,
      width: 20,
      child: CircularProgressIndicator(
        strokeWidth: 2,
        valueColor: AlwaysStoppedAnimation<Color>(color),
      ),
    );
  }
  
  Widget _buildButtonContent({
    required String text,
    required Color textColor,
    required double fontSize,
    IconData? icon,
    required double iconSize,
  }) {
    if (icon == null) {
      return Text(
        text,
        style: TextStyle(
          color: textColor,
          fontSize: fontSize,
          fontWeight: FontWeight.w600,
        ),
      );
    }
    
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, size: iconSize, color: textColor),
        const SizedBox(width: 8),
        Text(
          text,
          style: TextStyle(
            color: textColor,
            fontSize: fontSize,
            fontWeight: FontWeight.w600,
          ),
        ),
      ],
    );
  }
}

/// Button variants
enum ButtonVariant {
  primary,
  secondary,
  outline,
  text,
}

/// Button sizes
enum ButtonSize {
  small,
  medium,
  large,
}
